---
- name: Update and upgrade apt packages
  ansible.builtin.apt:
    upgrade: true
    update_cache: true

- name: Add nodes to host_file
  ansible.builtin.blockinfile:
    dest: /etc/hosts
    block: |
      "{{ nodes[0] }}"
      "{{ nodes[1] }}"
      "{{ nodes[2] }}"

- name: Remove Swap entry from /etc/fstab
  ansible.builtin.lineinfile:
    dest: /etc/fstab
    regexp: swap
    state: absent

# - name: Install containerd
#  ansible.builtin.unarchive:
#    src: https://github.com/containerd/containerd/releases/download/v1.6.9/containerd-1.6.9-linux-amd64.tar.gz
#    dest: /usr/local/
#    remote_src: true

# - name: Install containerd.service
#  ansible.builtin.get_url:
#    url: https://raw.githubusercontent.com/containerd/containerd/main/containerd.service
#    dest: /etc/systemd/system
#    mode: 0644

# - name: Download Runc
#  ansible.builtin.get_url:
#    url: https://github.com/opencontainers/runc/releases/download/v1.1.4/runc.amd64
#    dest: /tmp/
#    mode: 0644

# - name: Install Runc
#  ansible.builtin.command: install -m 755 runc.amd64 /usr/local/sbin/runc
#  args:
#    chdir: /tmp/
#  changed_when: false

- name: Install dependencies
  ansible.builtin.apt:
    update_cache: true
    name: "{{ pre_packages }}"
    state: present

- name: Ensure additional dependencies are installed (on Ubuntu < 20.04 and any other systems)
  ansible.builtin.apt:
    name: gnupg2
    state: present
  when: ansible_distribution != 'Ubuntu' or ansible_distribution_version is version('20.04', '<')

- name: Ensure additional dependencies are installed (on Ubuntu >= 20.04)
  ansible.builtin.apt:
    name: gnupg
    state: present
  when: ansible_distribution == 'Ubuntu' and ansible_distribution_version is version('20.04', '>=')

- name: Add Docker GPG apt Key
  ansible.builtin.apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present

- name: Add repository into sources list
  ansible.builtin.apt_repository:
    repo: "deb https://download.docker.com/linux/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} stable"
    state: present

- name: Install containerd
  ansible.builtin.apt:
    pkg: containerd.io
    state: present
    update_cache: true

- name: Install cni plugins
  ansible.builtin.unarchive:
    src: "{{ cni_link }}"
    dest: /opt/
    creates: /opt/cni/bin/
    remote_src: true

- name: Add conf for containerd
  ansible.builtin.blockinfile:
    path: /etc/modules-load.d/containerd.conf
    block: |
      overlay
      br_netfilter
    create: true
    mode: 0644

- name: Modprobe
  ansible.builtin.shell: |
    sudo modprobe overlay
    sudo modprobe br_netfilter
  changed_when: false

- name: Create a empty file for kubernetes sysctl params
  ansible.builtin.copy:
    content: ""
    dest: /etc/sysctl.d/99-kubernetes-cri.conf
    force: false
    mode: 0644
  changed_when: false

# - name: Add conf for cri
#  ansible.posix.sysctl:
#    name: "{{ config_cri }}"
#    value: '1'
#    sysctl_set: true
#    state: present
#    reload: true

- name: Add conf for cri
  ansible.builtin.lineinfile:
    path: /etc/sysctl.d/99-kubernetes-cri.conf
    line: "{{ item }}"
  with_items:
    - "net.bridge.bridge-nf-call-iptables  = 1"
    - "net.ipv4.ip_forward                 = 1"
    - "net.bridge.bridge-nf-call-ip6tables = 1"
  notify: Restart systemd

- name: Create containerd config file
  ansible.builtin.file:
    path: "/etc/containerd/config.toml"
    state: "touch"
    mode: 0644
  changed_when: false

- name: Set Cgroup driver to systemd
  ansible.builtin.shell: |
    containerd config default>/etc/containerd/config.toml
    sudo sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml
  changed_when: false

- name: Make sure SystemdCgroup != false
  ansible.builtin.lineinfile:
    path: /etc/containerd/config.toml
    state: absent
    line: '            SystemdCgroup = false'
  notify: Restart and enable containerd
  changed_when: false

- name: Install dependencies
  ansible.builtin.apt:
    name: "{{ pre_packages_docker }}"
    state: present

- name: Add an Apt signing key for kubelet, kubeadm, kubectl
  ansible.builtin.apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present

- name: Add K8s Source
  ansible.builtin.blockinfile:
    path: "/etc/apt/sources.list.d/kubernetes.list"
    block: |
      deb https://apt.kubernetes.io/ kubernetes-xenial main
    create: true
    mode: 0644

- name: Install kubelet, kubeadm, kubectl
  ansible.builtin.apt:
    update_cache: true
    name: "{{ packages_docker }}"
    state: present
  notify: Hold kubelet, kubeadm, kubectl

- name: Enable kubelet
  ansible.builtin.systemd:
    name: kubelet
    enabled: true

- name: Reboot all the kubernetes nodes
  ansible.builtin.reboot:
    post_reboot_delay: 10
    reboot_timeout: 40
    connect_timeout: 60
    test_command: uptime
